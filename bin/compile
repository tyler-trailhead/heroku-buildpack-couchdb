#!/bin/sh 

# bin/compile BUILD_DIR CACHE_DIR ENV_DIR

FINAL_BUILD_DIR=$1
CACHE_DIR=$2
BUILD_DIR=$CACHE_DIR/app
ENV_DIR=$3

export_env_dir() {
  env_dir=$ENV_DIR
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir

if [ ! -e $CACHE_DIR ]; then
    mkdir -p $CACHE_DIR
fi
if [ ! -e $BUILD_DIR ]; then
    mkdir -p $BUILD_DIR
fi


LOG=$BUILD_DIR/log
echo '' > $LOG

echo "==============================="
echo $FINAL_BUILD_DIR
echo $CACHE_DIR=
echo $BUILD_DIR
echo $ENV_DIR
echo $LOG
echo "==============================="

exit 1

# create dir to put all our stuff
if [ ! -e $CACHE_DIR/icu ]; then
    # get ICU
    wget -O $CACHE_DIR/icu4c-4_8_1_1-src.tgz http://download.icu-project.org/files/icu4c/4.8.1.1/icu4c-4_8_1_1-src.tgz >> $LOG 2>&1
    tar -xzf $CACHE_DIR/icu4c-4_8_1_1-src.tgz -C $CACHE_DIR >> $LOG 2>&1
    rm -f $CACHE_DIR/icu4c-4_8_1_1-src.tgz
    echo "-----> Downloaded icu"
fi

# build and install ICU
cd $CACHE_DIR/icu/source
if [ ! -e ./.configured ]; then
    ./configure --prefix=$BUILD_DIR/usr/ >> $LOG 2>&1
    touch .configured
    echo "-----> Configured icu"
fi
make >> $LOG 2>&1
make install >> $LOG 2>&1
echo "-----> Installed icu"

if [ ! -e $CACHE_DIR/js-1.8.5 ]; then
    # get spidermonkey
    wget -O $CACHE_DIR/js-1.8.5.tar.gz http://ftp.mozilla.org/pub/mozilla.org/js/js185-1.0.0.tar.gz > $LOG 2>&1
    tar -xzf $CACHE_DIR/js-1.8.5.tar.gz -C $CACHE_DIR >> $LOG 2>&1
    rm -f $CACHE_DIR/js-1.8.5.tar.gz
    echo "-----> Downloaded spidermonkey"
fi

# build and install spidermonkey
cd $CACHE_DIR/js-1.8.5/js/src
if [ ! -e ./.configured ]; then
    ./configure --prefix=$BUILD_DIR/usr/ >> $LOG 2>&1
    touch .configured
    echo "-----> Configured spidermonkey"
fi
make >> $LOG 2>&1
make install >> $LOG 2>&1
rm js
echo "-----> Installed spidermonkey"


# if [ ! -e $CACHE_DIR/otp_src_17.1 ]; then
#     # get erlang
#     wget -O $CACHE_DIR/otp_src_17.1.tar.gz http://www.erlang.org/download/otp_src_18.1.tar.gz >> $LOG 2>&1
#     tar -xzf $CACHE_DIR/otp_src_17.1.tar.gz -C $CACHE_DIR >> $LOG 2>&1
#     rm -f $CACHE_DIR/otp_src_17.1.tar.gz
#     echo "-----> Downloaded erlang"
# fi


# # some step ahead chokes if this file exists

# # build and install erlang
# cd $CACHE_DIR/otp_src_17.1
# if [ ! -e ./.configured ]; then
#     ./configure --prefix=$BUILD_DIR/usr/ >> $LOG 2>&1
#     touch .configured
#     echo "-----> Configured erlang"
# fi
# make >> $LOG 2>&1
# make install >> $LOG 2>&1
# echo "-----> Installed erlang"


if [ ! -e $CACHE_DIR/apache-couchdb-1.6.1 ]; then
    # get couchdb
    wget -O $CACHE_DIR/apache-couchdb-1.6.1.tar.gz http://mirror.csclub.uwaterloo.ca/apache/couchdb/source/1.6.1/apache-couchdb-1.6.1.tar.gz >> $LOG 2>&1
    tar -xzf $CACHE_DIR/apache-couchdb-1.6.1.tar.gz -C $CACHE_DIR >> $LOG 2>&1
    rm -f $CACHE_DIR/apache-couchdb-1.6.1.tar.gz
    echo "-----> Downloaded couchdb"
fi


# build couchdb
cd $CACHE_DIR/apache-couchdb-1.6.1
export PATH=$PATH:$BUILD_DIR/usr/bin/:$BUILD_DIR/usr/local/bin
export ICU_CONFIG="$BUILD_DIR/usr/bin/icu-config --detect-prefix"
export ICU_CPPFLAGS="-I$BUILD_DIR/usr/include/"
if [ ! -e ./.configured ]; then
    ./configure --prefix=$BUILD_DIR --with-js-lib=$BUILD_DIR/usr/lib/ --with-js-include=$BUILD_DIR/usr/include/js/ --with-erlang=$BUILD_DIR/usr/lib/erlang/usr/include/ >> $LOG 2>&1
    touch .configured
    echo "-----> Configured couchdb"
fi
make >> $LOG 2>&1
make install >> $LOG 2>&1
echo "-----> Installed couchdb"


# Configure couchDB
mkdir -p $BUILD_DIR/etc/default/
mkdir -p $BUILD_DIR/etc/couchdb/

cat > $BUILD_DIR/etc/default/couchdb << EOM
# Sourced by init script for configuration.

# we use the current username to run couchdb
#COUCHDB_USER=couchdb
COUCHDB_STDOUT_FILE=/dev/null
COUCHDB_STDERR_FILE=/dev/null
COUCHDB_RESPAWN_TIMEOUT=5
COUCHDB_OPTIONS=
EOM

echo "-----> Setting port to $PORT"
# change port and bind_address where openshift expects DIY apps to serve
cat > $BUILD_DIR/etc/couchdb/local.ini << EOM
[httpd]
port = PORT
bind_address = "0.0.0.0"

[log]
file = /var/log/couchdb/couch.log
EOM

# configure proper folders
cp -r $BUILD_DIR/* $FINAL_BUILD_DIR
cd $FINAL_BUILD_DIR

find . -type f -name "*" -exec sed -i'' -e "s#$BUILD_DIR#/app#g" {} +

echo "-----> Configuration copied"


